swagger: "2.0"
info:
  description: "This is SDLC Portal you can create projects for all tools at once."
  version: "1.0.0"
  title: "SDLCPortal"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "admin@devopswise.co.uk"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "portal.cdt.devopswise.co.uk"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "https://devopswise.co.uk"
schemes:
- "https"
- "http"
paths:
  /project:
    post:
      tags:
        - project
      summary: create a new project
      description: ''
      operationId: addproject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Project description to create
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:projects'
            - 'read:projects'
    put:
      tags:
        - project
      summary: Update an existing project
      description: ''
      operationId: updateProject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: project object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: project not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:projects'
            - 'read:projects'
  /project/findByStatus:
    get:
      tags:
        - project
      summary: Finds projects by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findProjectsByStatus
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:projects'
            - 'read:projects'
  /project/findByTags:
    get:
      tags:
        - project
      summary: Finds projects by tags
      description: 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findProjectsByTags
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:projects'
            - 'read:projects'
      deprecated: true
  '/project/{projectId}':
    get:
      tags:
        - project
      summary: Find project by ID
      description: Returns a single project
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: project not found
      security:
        - api_key: []
    post:
      tags:
        - project
      summary: Updates a project in the store with form data
      description: ''
      operationId: updateProjectWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the project
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the project
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:projects'
            - 'read:projects'
    delete:
      tags:
        - project
      summary: Deletes a project
      description: ''
      operationId: deleteProject
      produces:
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: projectId
          in: path
          description: project id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid project value
      security:
        - petstore_auth:
            - 'write:projects'
            - 'read:projects'
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:projects: "modify projects in your account"
      read:projects: "read your projects"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Project:
    title: Project
    description: A project for sale in the project store
    type: object
    required:
      - name
      - key
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Helloworld
      key:
        type: string
        example: HELLO
      users:
        type: array
        items:
          type: string
      lead:
        type: string
        example: alice.developer
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      description:
        type: string
        description: project status in the store
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"