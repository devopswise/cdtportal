/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.devopswise.cdtportal.api;

import com.devopswise.cdtportal.model.Workspace;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-10T16:50:20.069Z")

@Api(value = "workspace", description = "the workspace API")
public interface WorkspaceApi {

    @ApiOperation(value = "create a new workspace", notes = "Creates a workspace shared between all tools", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/workspace",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createWorkspace(@ApiParam(value = "Workspace description to create" ,required=true )  @Valid @RequestBody Workspace body);


    @ApiOperation(value = "Deletes a workspace", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid workspace value", response = Void.class) })
    
    @RequestMapping(value = "/workspace/{workspaceId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteWorkspace(@ApiParam(value = "workspace id to delete",required=true ) @PathVariable("workspaceId") Long workspaceId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Finds workspaces by its name", notes = "List workspaces meeting criteria", response = Workspace.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Workspace.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/workspace/findByName",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Workspace>> findWorkspacesByName( @NotNull@ApiParam(value = "name of the workspace", required = true) @RequestParam(value = "workspaceName", required = true) String workspaceName);


    @ApiOperation(value = "Finds workspaces by its owner", notes = "List workspaces of given user", response = Workspace.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Workspace.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/workspace/findByOwner",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Workspace>> findWorkspacesByOwner( @NotNull@ApiParam(value = "username of workspace owner", required = true) @RequestParam(value = "username", required = true) String username);


    @ApiOperation(value = "Finds workspaces by status", notes = "Multiple status values can be provided with comma separated strings", response = Workspace.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Workspace.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/workspace/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Workspace>> findWorkspacesByStatus( @NotNull@ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, sold") @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find workspace by ID", notes = "Returns a single workspace", response = Workspace.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Workspace.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "workspace not found", response = Void.class) })
    
    @RequestMapping(value = "/workspace/{workspaceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Workspace> getWorkspaceById(@ApiParam(value = "ID of workspace to return",required=true ) @PathVariable("workspaceId") Long workspaceId);


    @ApiOperation(value = "Update an existing workspace", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "workspace not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class) })
    
    @RequestMapping(value = "/workspace",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateWorkspace(@ApiParam(value = "workspace object that needs to be added to the store" ,required=true )  @Valid @RequestBody Workspace body);


    @ApiOperation(value = "Updates a workspace in the store with form data", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "workspace", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/workspace/{workspaceId}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateWorkspaceWithForm(@ApiParam(value = "ID of workspace that needs to be updated",required=true ) @PathVariable("workspaceId") Long workspaceId,@ApiParam(value = "Updated name of the workspace") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "Updated status of the workspace") @RequestPart(value="status", required=false)  String status);

}
