/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.devopswise.cdtportal.api;

import com.devopswise.cdtportal.model.Project;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-12T17:43:26.471Z")

@Api(value = "project", description = "the project API")
public interface ProjectApi {

    @ApiOperation(value = "create a new project", notes = "Creates a project shared between all tools", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/project",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createProject(@ApiParam(value = "Project description to create" ,required=true )  @Valid @RequestBody Project body);


    @ApiOperation(value = "Deletes a project", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid project value", response = Void.class) })
    
    @RequestMapping(value = "/project/{projectId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProject(@ApiParam(value = "project id to delete",required=true ) @PathVariable("projectId") Long projectId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Finds projects by status", notes = "Multiple status values can be provided with comma separated strings", response = Project.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Project.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/project/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Project>> findProjectsByStatus( @NotNull@ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, sold") @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Finds projects by tags", notes = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.", response = Project.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Project.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid tag value", response = Void.class) })
    
    @RequestMapping(value = "/project/findByTags",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Project>> findProjectsByTags( @NotNull@ApiParam(value = "Tags to filter by", required = true) @RequestParam(value = "tags", required = true) List<String> tags);


    @ApiOperation(value = "Find project by ID", notes = "Returns a single project", response = Project.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Project.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "project not found", response = Void.class) })
    
    @RequestMapping(value = "/project/{projectId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Project> getProjectById(@ApiParam(value = "ID of project to return",required=true ) @PathVariable("projectId") Long projectId);


    @ApiOperation(value = "Update an existing project", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "project not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class) })
    
    @RequestMapping(value = "/project",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateProject(@ApiParam(value = "project object that needs to be added to the store" ,required=true )  @Valid @RequestBody Project body);


    @ApiOperation(value = "Updates a project in the store with form data", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "api_key"),
        @Authorization(value = "cdtportal_auth")
    }, tags={ "project", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/project/{projectId}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateProjectWithForm(@ApiParam(value = "ID of project that needs to be updated",required=true ) @PathVariable("projectId") Long projectId,@ApiParam(value = "Updated name of the project") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "Updated status of the project") @RequestPart(value="status", required=false)  String status);

}
